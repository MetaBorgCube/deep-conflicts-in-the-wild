Ambiguity 1: 
let run_proc_analysis ~propagate_exceptions analyze_proc curr_pdesc callee_pdesc =
  let curr_pname = Procdesc.get_proc_name curr_pdesc in
  let callee_pname = Procdesc.get_proc_name callee_pdesc in

  let log_elapsed_time =
    let start_time = Unix.gettimeofday () in
    fun () ->
      let elapsed_time = Unix.gettimeofday () -. start_time in
      L.out "Elapsed analysis time: %a: %f\n"
        Typ.Procname.pp callee_pname
        elapsed_time in

  (* Dot means start of a procedure *)
  L.log_progress_procedure ();
  if Config.trace_ondemand then L.stderr "[%d] run_proc_analysis %a -> %a@."
      !nesting
      Typ.Procname.pp curr_pname
      Typ.Procname.pp callee_pname;

  let preprocess () =
    incr nesting;
    let initial_summary = Specs.reset_summary callee_pdesc in
    add_active callee_pname;
    initial_summary in

  let postprocess summary =
    decr nesting;
    Specs.store_summary summary;
    remove_active callee_pname;
    Printer.write_proc_html callee_pdesc;
    log_elapsed_time ();
    summary in

  let log_error_and_continue exn summary kind =
    Reporting.log_error_from_summary summary exn;
    let stats = { summary.Specs.stats with Specs.stats_failure = Some kind } in
    let payload =
      { summary.Specs.payload with Specs.preposts = Some []; } in
    let new_summary = { summary with Specs.stats; payload } in
    Specs.store_summary new_summary;
    remove_active callee_pname;
    log_elapsed_time ();
    new_summary in

  let old_state = save_global_state () in
  let initial_summary = preprocess () in
  try
    let summary =
      analyze_proc initial_summary callee_pdesc
      |> postprocess in
    restore_global_state old_state;
    summary
  with exn ->
    L.stderr "@.ONDEMAND EXCEPTION %a %s@.@.BACK TRACE@.%s@?"
      Typ.Procname.pp callee_pname
      (Exn.to_string exn)
      (Printexc.get_backtrace ());
    restore_global_state old_state;
    if propagate_exceptions
    then
      raise exn
    else
      match exn with
      | SymOp.Analysis_failure_exe kind ->
          (* in production mode, log the timeout/crash and continue with the summary we had before
             the failure occurred *)
          log_error_and_continue exn initial_summary kind
      | _ ->
          (* this happens with assert false or some other unrecognized exception *)
          log_error_and_continue exn initial_summary (FKcrash (Exn.to_string exn))


