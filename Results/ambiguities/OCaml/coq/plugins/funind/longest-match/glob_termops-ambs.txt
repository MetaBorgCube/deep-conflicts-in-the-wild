Ambiguity 1: 
| eq::eqs ->
      match eq with
	 | PatVar _,_ | _,PatVar _ -> are_unifiable_aux eqs
	 | PatCstr(_,constructor1,cpl1,_),PatCstr(_,constructor2,cpl2,_) ->
	     if not (eq_constructor constructor2 constructor1)
	     then raise NotUnifiable
	     else
	       let eqs' =
		 try (List.combine cpl1 cpl2) @ eqs
		 with Invalid_argument _ -> anomaly (Pp.str "are_unifiable_aux")
	       in
	       are_unifiable_aux eqs'

Ambiguity 2: 
| eq::eqs ->
      match eq with
	 | PatVar _,PatVar _ -> eq_cases_pattern_aux eqs
	 | PatCstr(_,constructor1,cpl1,_),PatCstr(_,constructor2,cpl2,_) ->
	     if not (eq_constructor constructor2 constructor1)
	     then raise NotUnifiable
	     else
	       let eqs' =
		 try (List.combine cpl1 cpl2) @ eqs
		 with Invalid_argument _ -> anomaly (Pp.str "eq_cases_pattern_aux")
	       in
	       eq_cases_pattern_aux eqs'
	 | _ -> raise NotUnifiable