Ambiguity 1: 
|q::r -> let m'= snd (List.hd (ppol q)) in
    match (div_mon_test m m') with
      true -> q
    |false -> selectdiv m r

Ambiguity 2: 
let selectdiv table m l =
  try find_hmon table m
  with Not_found ->
    let q = selectdiv m l in
    let q = ppol q in
    match q with
    | [] -> q
    | _ :: _ ->
      let () = add_hmon table m q in
      q



Ambiguity 3: 
|t::p' ->
	let (a,m)=t in
      let q = selectdiv table m l in
      match q with
	[] -> if reduire_les_queues
	then
	  let (c,r)=(reduce p') in
          (c,((P.multP a c,m)::r))
	else (coef1,p)
      |(b,m')::q' -> 
          let c=(pgcdpos a b) in
          let a'= (div_coef b c) in
          let b'=(P.oppP (div_coef a c)) in
          let (e,r)=reduce (div_pol p' q' a' b'
                              (div_mon m m')) in
          (P.multP a' e,r)

Ambiguity 4: 
|t::p' ->
	let (a,m)=t in
      let q = selectdiv table m l in
      match q with
	[] ->
	  if reduire_les_queues
	  then
	    let (lq,r)=(reduce p') in
            (lq,((a,m)::r))
	  else ([],p)
      |(b,m')::q' -> 
          let b'=(P.oppP (div_coef a b)) in
          let m''= div_mon m m' in
          let p1=plusP p' (mult_t_pol b' m'' q') in
          let (lq,r)=reduce p1 in
          ((b',m'',q)::lq, r)

Ambiguity 5: 
| Some (((i, j), m), lpc2) ->
	  if critere3 table ((i,j),m) lp lpc2
	  then (sinfo "c"; pbuchf cur_pb (lp, lpc2))
	  else    
	    let (a0, p0, q0) = spol0 table.allpol.(i) table.allpol.(j) in
	    if homogeneous && a0 <>[] && deg_hom a0 > deg_hom cur_pb.cur_poly
	    then (sinfo "h"; pbuchf cur_pb (lp, lpc2))
	    else
(*	      let sa = a.sugar in*)
              match reduce2 table a0 lp with
		_, [] -> sinfo "0";pbuchf cur_pb (lp, lpc2)
              | ca, _ :: _ ->
(*		info "pair reduced\n";*)
                  let map q =
                    let r =
                      if q.num == i then p0 else if q.num == j then q0 else []
                    in
                    emultP ca r
                  in
                  let lcp = List.map map lp in
                  let (lca, a0) = reduce2_trace table (emultP ca a0) lp lcp in
(*		info "paire re-reduced";*)
                  let a = new_allpol table a0 in
		  List.iter2 (fun c q -> coefpoldep_set table a q c) lca lp;
		  let a0 = a in
		  info (fun () -> "new polynomial: "^(stringPcut metadata (ppol a0)));
                  let nlp = addS a0 lp in
		  try test_dans_ideal cur_pb table metadata p nlp len0
		  with NotInIdealUpdate cur_pb ->
		    let newlpc = cpairs1 a0 lp lpc2 in
		    pbuchf cur_pb (nlp, newlpc)
  