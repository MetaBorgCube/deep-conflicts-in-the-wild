Ambiguity 1: 
|_->
	 match match_with_forall_term sigma cciterm with
	     Some (_,a,b)-> Forall (a, b)
	   |_->
	      match match_with_nodep_ind sigma cciterm with
		  Some (i,l,n)->
		    let ind,u=EConstr.destInd sigma i in
		    let u = EConstr.EInstance.kind sigma u in
		    let (mib,mip) = Global.lookup_inductive ind in
		    let nconstr=Array.length mip.mind_consnames in
		      if Int.equal nconstr 0 then
			False((ind,u),l)
		      else
			let has_realargs=(n>0) in
			let is_trivial=
			  let is_constant c =
			    Int.equal (nb_prod sigma (EConstr.of_constr c)) mib.mind_nparams in
			    Array.exists is_constant mip.mind_nf_lc in
			  if Inductiveops.mis_is_recursive (ind,mib,mip) ||
			    (has_realargs && not is_trivial)
			  then
			    Atom cciterm
			  else
			    if Int.equal nconstr 1 then
			      And((ind,u),l,is_trivial)
			    else
			      Or((ind,u),l,is_trivial)
		| _ ->
		    match match_with_sigma_type sigma cciterm with
			Some (i,l)->
                          let (ind, u) = EConstr.destInd sigma i in
                          let u = EConstr.EInstance.kind sigma u in
                          Exists((ind, u), l)
		      |_-> Atom (normalize cciterm)