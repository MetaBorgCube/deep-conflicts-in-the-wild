Ambiguity 1: 
neg m =
  if is_zero m then zero else
  let n = Array.copy m in
  let i = ref (Array.length m - 1) in
  while !i > 0 && Int.equal n.(!i) 0 do decr i done;
  if Int.equal !i 0 then begin
    n.(0) <- - n.(0);
    (* n.(0) cannot be 0 since m is canonical *)
    if Int.equal n.(0) (-1) then normalize_neg n
    else if Int.equal n.(0) base then (n.(0) <- 0; Array.append [| 1 |] n)
    else n
  end else begin
    (* here n.(!i) <> 0, hence 0 < base - n.(!i) < base for n canonical *)
    n.(!i) <- base - n.(!i); decr i;
    while !i > 0 do n.(!i) <- base - 1 - n.(!i); decr i done;
    (* since -base <= n.(0) <= base-1, hence -base <= -n.(0)-1 <= base-1 *)
    n.(0) <- - n.(0) - 1;
    (* since m is canonical, m.(0)<>0 hence n.(0)<>-1,
       and m=-1 is already handled above, so here m.(0)<>-1 hence n.(0)<>0 *)
    n
  end

Ambiguity 2: 
mult m n =
  if is_zero m || is_zero n then zero else
  let l = Array.length m + Array.length n in
  let r = Array.make l 0 in
  for i = Array.length m - 1 downto 0 do
    for j = Array.length n - 1 downto 0 do
      let p = m.(i) * n.(j) + r.(i+j+1) in
      let (q,s) =
        if p < 0
        then (p + 1) / base - 1, (p + 1) mod base + base - 1
        else p / base, p mod base in
      r.(i+j+1) <- s;
      if not (Int.equal q 0) then r.(i+j) <- r.(i+j) + q;
    done
  done;
  normalize r

Ambiguity 3: 
q,r =
    if less_than m d then (zero,m) else
    let ql = Array.length m - Array.length d in
    let q = Array.make (ql+1) 0 in
    let i = ref 0 in
    while not (less_than_shift_pos !i m d) do
      if Int.equal m.(!i) 0 then incr i else
      if can_divide !i m d 0 then begin
        let v =
          if Array.length d > 1 && not (Int.equal d.(0) m.(!i)) then
            (m.(!i) * base + m.(!i+1)) / (d.(0) * base + d.(1) + 1)
          else
            m.(!i) / d.(0) in
        q.(!i) <- q.(!i) + v;
	sub_mult m d v !i
      end else begin
        let v = (m.(!i) * base + m.(!i+1)) / (d.(0) + 1) in
        q.(!i) <- q.(!i) + v / base;
	sub_mult m d (v / base) !i;
        q.(!i+1) <- q.(!i+1) + v mod base;
	if q.(!i+1) >= base then
	  (q.(!i+1) <- q.(!i+1)-base; q.(!i) <- q.(!i)+1);
	sub_mult m d (v mod base) (!i+1)
      end
    done;
    (normalize q, normalize m)

Ambiguity 4: 
while !d < len && s.[!d] == '0' do incr d done;
  if Int.equal !d len then zero else
  let r = (len - !d) mod size in
  let h = String.sub s (!d) r in
  let e = match h with "" -> 0 | _ -> 1 in
  let l = (len - !d) / size in
  let a = Array.make (l + e) 0 in
  if Int.equal e 1 then a.(0) <- int_of_string h;
  for i = 1 to l do
    a.(i+e-1) <- int_of_string (String.sub s ((i-1)*size + !d + r) size)
  done;
  if isneg then neg a else a