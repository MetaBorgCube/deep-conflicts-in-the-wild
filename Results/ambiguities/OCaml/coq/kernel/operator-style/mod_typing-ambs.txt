Ambiguity 1: 
c', univs, ctx' = 
	if not cb.const_polymorphic then
	  let env' = Environ.push_context ~strict:true uctx env' in
	  let env' = Environ.push_context ~strict:true ctx env' in
	  let c',cst = match cb.const_body with
	    | Undef _ | OpaqueDef _ ->
	      let j = Typeops.infer env' c in
	      let typ = Typeops.type_of_constant_type env' cb.const_type in
	      let cst' = Reduction.infer_conv_leq env' (Environ.universes env')
						j.uj_type typ in
	      j.uj_val, cst'
	    | Def cs ->
	       let c' = Mod_subst.force_constr cs in
	         c, Reduction.infer_conv env' (Environ.universes env') c c'
	  in c', ctx, Univ.ContextSet.add_constraints cst (Univ.ContextSet.of_context ctx)
	else
	  let cus, ccst = Univ.UContext.dest uctx in
	  let newus, cst = Univ.UContext.dest ctx in
	  let () =
	    if not (Univ.Instance.length cus == Univ.Instance.length newus) then
	      error_incorrect_with_constraint lab
	  in
	  let inst = Univ.Instance.append cus newus in
	  let csti = Univ.enforce_eq_instances cus newus cst in
	  let csta = Univ.Constraint.union csti ccst in
	  let env' = Environ.push_context ~strict:false (Univ.UContext.make (inst, csta)) env in
	  let () = if not (UGraph.check_constraints cst (Environ.universes env')) then
		     error_incorrect_with_constraint lab
	  in
	  let cst = match cb.const_body with
	    | Undef _ | OpaqueDef _ ->
	      let j = Typeops.infer env' c in
	      let typ = Typeops.type_of_constant_type env' cb.const_type in
	      let typ = Vars.subst_instance_constr cus typ in
	      let cst' = Reduction.infer_conv_leq env' (Environ.universes env')
						j.uj_type typ in
	      cst'
	    | Def cs ->
	       let c' = Vars.subst_instance_constr cus (Mod_subst.force_constr cs) in
	       let cst' = Reduction.infer_conv env' (Environ.universes env') c c' in
	        cst'
	  in
	    if not (Univ.Constraint.is_empty cst) then
	      error_incorrect_with_constraint lab;
	    let subst, ctx = Univ.abstract_universes true ctx in
	      Vars.subst_univs_level_constr subst c, ctx, Univ.ContextSet.empty