Ambiguity 1: 
| EvalVar id ->
      env |> lookup_named id |> NamedDecl.get_value
  | EvalRel n ->
      env |> lookup_rel n |> RelDecl.get_value |> Option.map (lift n)
  | EvalEvar ev ->
    match EConstr.kind sigma (mkEvar ev) with
    | Evar _ -> None
    | c -> Some (EConstr.of_kind c)

Ambiguity 2: 
| EvalVar id ->
      env |> lookup_named id |> NamedDecl.get_value
  | EvalRel n ->
      env |> lookup_rel n |> RelDecl.get_value |> Option.map (lift n)
  | EvalEvar ev ->
    match EConstr.kind sigma (mkEvar ev) with
    | Evar _ -> None
    | c -> Some (EConstr.of_kind c)

Ambiguity 3: 
d -> match EConstr.kind sigma d with
         | Rel k ->
             if
	       Array.for_all (Vars.noccurn sigma k) tys
	       && Array.for_all (Vars.noccurn sigma (k+nbfix)) bds
	       && k <= n
	     then
	       (k, List.nth labs (k-1))
	     else
	       raise Elimconst
         | _ ->
	     raise Elimconst

Ambiguity 4: 
| _ ->
	let refi = match ref with
	  | EvalRel _ | EvalEvar _ -> None
	  | EvalVar id' -> Some (EvalVar id)
	  | EvalConst kn ->
	      Some (EvalConst (con_with_label kn (Label.of_id id))) in
	match refi with
	  | None -> None
	  | Some ref ->
	      try match unsafe_reference_opt_value env sigma ref with
		| None -> None
		| Some c ->
		    let labs',ccl = decompose_lam sigma c in
		    let _, l' = whd_betalet_stack sigma ccl in
		    let labs' = List.map snd labs' in
		    (** ppedrot: there used to be generic equality on terms here *)
                    let eq_constr c1 c2 = EConstr.eq_constr sigma c1 c2 in
		    if List.equal eq_constr labs' labs &&
                       List.equal eq_constr l l' then Some (minfxargs,ref)
                    else None
	      with Not_found (* Undefined ref *) -> None
      

Ambiguity 5: 
| LetIn (n,b,t,c) -> redrec (applist (Vars.substl [b] c, stack))
      | App (f,cl) -> redrec (applist(f, (Array.to_list cl)@stack))
      | Cast (c,_,_) -> redrec (applist(c, stack))
      | Case (ci,p,c,lf) ->
          (try
	    redrec (applist(special_red_case env sigma redrec (ci,p,c,lf), stack))
	  with
	      Redelimination -> s')
      | Fix fix ->
	  (try match reduce_fix (whd_construct_stack env) sigma fix stack with
            | Reduced s' -> redrec (applist s')
	    | NotReducible -> s'
	  with Redelimination -> s')

      | Proj (p, c) ->
        (try 
	   let unf = Projection.unfolded p in
	     if unf || is_evaluable env (EvalConstRef (Projection.constant p)) then
	       let pb = lookup_projection p env in
 		 (match unf, ReductionBehaviour.get (ConstRef (Projection.constant p)) with
 		 | false, Some (l, n, f) when List.mem `ReductionNeverUnfold f -> 
                   (* simpl never *) s'
		 | false, Some (l, n, f) when not (List.is_empty l) ->
		   let l' = List.map_filter (fun i -> 
		     let idx = (i - (pb.Declarations.proj_npars + 1)) in
		       if idx < 0 then None else Some idx) l in
		   let stack = reduce_params env sigma stack l' in
		     (match reduce_projection env sigma pb 
		       (whd_construct_stack env sigma c) stack 
		      with
		      | Reduced s' -> redrec (applist s')
		      | NotReducible -> s')
 		 | _ ->
		   match reduce_projection env sigma pb (whd_construct_stack env sigma c) stack with
		   | Reduced s' -> redrec (applist s')
		   | NotReducible -> s')
	   else s'
	 with Redelimination -> s')
	  
      | _ -> 
        match match_eval_ref env sigma x with
	| Some (ref, u) ->
          (try
	     let sapp, nocase = red_elim_const env sigma ref u stack in
             let hd, _ as s'' = redrec (applist(sapp)) in
             let rec is_case x = match EConstr.kind sigma x with
               | Lambda (_,_, x) | LetIn (_,_,_, x) | Cast (x, _,_) -> is_case x
               | App (hd, _) -> is_case hd
               | Case _ -> true
               | _ -> false in
               if nocase && is_case hd then raise Redelimination
               else s''
           with Redelimination -> s')
	| None -> s'

Ambiguity 6: 
| Prod (n,ty,t') ->
	  let open Context.Rel.Declaration in
	  if allow_product then
	    elimrec (push_rel (LocalAssum (n,ty)) env) t' ((LocalAssum (n,ty))::l)
	  else
	    user_err  (str"Not an inductive definition.")
      | _ ->
	  (* Last chance: we allow to bypass the Opaque flag (as it
	     was partially the case between V5.10 and V8.1 *)
	  let t' = whd_all env sigma t in
	  match EConstr.kind sigma (fst (decompose_app_vect sigma t')) with
	    | Ind ind-> (check_privacy env ind, it_mkProd_or_LetIn t' l)
	    | _ -> user_err  (str"Not an inductive product.")

Ambiguity 7: 
Redelimination ->
	     match reference_opt_value env sigma ref u with
	       | Some d -> (d, stack)
	       | None -> raise NotStepReducible