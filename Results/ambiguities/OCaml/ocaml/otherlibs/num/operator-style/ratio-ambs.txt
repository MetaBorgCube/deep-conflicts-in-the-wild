Ambiguity 1: 
approx_ratio_exp n r =
 (* Don't need to normalize *)
 if (null_denominator r) then failwith_zero "approx_ratio_exp"
 else if n <= 0 then invalid_arg "approx_ratio_exp"
 else
  let sign_r = sign_ratio r
  and i = ref (n + 3) in
   if sign_r = 0 then
     String.concat "" ["+0."; String.make n '0'; "e0"]
   else
     let msd = msd_ratio (abs_ratio r) in
     let k = n - msd in
     let s =
      (let nat = nat_of_big_int
                (if k < 0
                  then
                   div_big_int (abs_big_int r.numerator)
                               (base_power_big_int 10 (- k)
                                                   r.denominator)
                 else
                  div_big_int (base_power_big_int
                                10 k (abs_big_int r.numerator))
                               r.denominator) in
       string_of_nat nat) in
     if round_futur_last_digit (Bytes.unsafe_of_string s) 0
                               (String.length s)
      then
       let m = num_decimal_digits_int (succ msd) in
       let str = Bytes.make (n + m + 4) '0' in
         (String.blit (if sign_r = -1 then "-1." else "+1.") 0 str 0 3);
         Bytes.set str !i ('e');
         incr i;
         (if m = 0
          then Bytes.set str !i '0'
          else String.blit (string_of_int (succ msd)) 0 str !i m);
         Bytes.unsafe_to_string str
     else
      let m = num_decimal_digits_int (succ msd)
      and p = n + 3 in
      let str = Bytes.make (succ (m + p)) '0' in
        (String.blit (if sign_r = -1 then "-0." else "+0.") 0 str 0 3);
        (String.blit s 0 str 3 n);
        Bytes.set str p 'e';
        (if m = 0
          then Bytes.set str (succ p) '0'
          else (String.blit (string_of_int (succ msd)) 0 str (succ p) m));
        Bytes.unsafe_to_string str