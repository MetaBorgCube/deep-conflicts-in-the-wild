Ambiguity 1: 
| _ ->
  match mexp.mod_desc with
    Tmod_ident (path,_) ->
      apply_coercion loc Strict cc
        (transl_path ~loc mexp.mod_env path)
  | Tmod_structure str ->
      transl_struct loc [] cc rootpath str
  | Tmod_functor( param, _, mty, body) ->
      let bodypath = functor_path rootpath param in
      oo_wrap mexp.mod_env true
        (function
        | Tcoerce_none ->
            Lfunction(Curried, [param],
                      transl_module Tcoerce_none bodypath body)
        | Tcoerce_functor(ccarg, ccres) ->
            let param' = Ident.create "funarg" in
            Lfunction(Curried, [param'],
                      Llet(Alias, param,
                           apply_coercion loc Alias ccarg (Lvar param'),
                           transl_module ccres bodypath body))
        | _ ->
            fatal_error "Translmod.transl_module")
        cc
  | Tmod_apply(funct, arg, ccarg) ->
      oo_wrap mexp.mod_env true
        (apply_coercion loc Strict cc)
        (Lapply(transl_module Tcoerce_none None funct,
                [transl_module ccarg None arg], loc))
  | Tmod_constraint(arg, mty, _, ccarg) ->
      transl_module (compose_coercions cc ccarg) rootpath arg
  | Tmod_unpack(arg, _) ->
      apply_coercion loc  Strict cc (Translcore.transl_exp arg)

Ambiguity 2: 
| item :: rem ->
      match item.str_desc with
      | Tstr_eval (expr, _) ->
      Lsequence(transl_exp expr, transl_structure loc fields cc rootpath rem)
  | Tstr_value(rec_flag, pat_expr_list) ->
      let ext_fields = rev_let_bound_idents pat_expr_list @ fields in
      transl_let rec_flag pat_expr_list
                 (transl_structure loc ext_fields cc rootpath rem)
  | Tstr_primitive descr ->
      record_primitive descr.val_val;
      transl_structure loc fields cc rootpath rem
  | Tstr_type decls ->
      transl_structure loc  fields cc rootpath rem
  | Tstr_typext(tyext) ->
      let ids = List.map (fun ext -> ext.ext_id) tyext.tyext_constructors in
      transl_type_extension item.str_env rootpath tyext
        (transl_structure loc (List.rev_append ids fields) cc rootpath rem)
  | Tstr_exception ext ->
      let id = ext.ext_id in
      let path = field_path rootpath id in
      Llet(Strict, id, transl_extension_constructor item.str_env path ext,
           transl_structure loc (id :: fields) cc rootpath rem)
  | Tstr_module mb ->
      let id = mb.mb_id in
      Llet(pure_module mb.mb_expr, id,
           transl_module Tcoerce_none (field_path rootpath id) mb.mb_expr,
           transl_structure loc (id :: fields) cc rootpath rem)
  | Tstr_recmodule bindings ->
      let ext_fields =
        List.rev_append (List.map (fun mb -> mb.mb_id) bindings) fields
      in
      compile_recmodule
        (fun id modl ->
          transl_module Tcoerce_none (field_path rootpath id) modl)
        bindings
        (transl_structure loc ext_fields cc rootpath rem)
  | Tstr_class cl_list ->
      let ids = List.map (fun (ci,_,_) -> ci.ci_id_class) cl_list in
      Lletrec(List.map
              (fun (ci, meths, vf) ->
                let id = ci.ci_id_class in
                let cl = ci.ci_expr in
                  (id, transl_class ids id meths cl vf ))
                cl_list,
              transl_structure loc (List.rev_append ids fields) cc rootpath rem)
  | Tstr_include incl ->
      let ids = bound_value_identifiers incl.incl_type in
      let modl = incl.incl_mod in
      let mid = Ident.create "include" in
      let rec rebind_idents pos newfields = function
        [] ->
          transl_structure loc newfields cc rootpath rem
      | id :: ids ->
          Llet(Alias, id, Lprim(Pfield (pos, Fld_na), [Lvar mid], incl.incl_loc),
               rebind_idents (pos + 1) (id :: newfields) ids) in
      Llet(pure_module modl, mid, transl_module Tcoerce_none None modl,
           rebind_idents 0 fields ids)

  | Tstr_modtype _
  | Tstr_open _
  | Tstr_class_type _
  | Tstr_attribute _ ->
      transl_structure loc fields cc rootpath rem

Ambiguity 3: 
| item :: rem ->
    match item.str_desc with
    | Tstr_eval (expr, _) -> defined_idents rem
    | Tstr_value(rec_flag, pat_expr_list) ->
      let_bound_idents pat_expr_list @ defined_idents rem
    | Tstr_primitive desc -> defined_idents rem
    | Tstr_type decls -> defined_idents rem
    | Tstr_typext tyext ->
      List.map (fun ext -> ext.ext_id) tyext.tyext_constructors
      @ defined_idents rem
    | Tstr_exception ext -> ext.ext_id :: defined_idents rem
    | Tstr_module mb -> mb.mb_id :: defined_idents rem
    | Tstr_recmodule decls ->
      List.map (fun mb -> mb.mb_id) decls @ defined_idents rem
    | Tstr_modtype _ -> defined_idents rem
    | Tstr_open _ -> defined_idents rem
    | Tstr_class cl_list ->
      List.map (fun (ci, _, _) -> ci.ci_id_class) cl_list @ defined_idents rem
    | Tstr_class_type cl_list -> defined_idents rem
    | Tstr_include incl ->
      bound_value_identifiers incl.incl_type @ defined_idents rem
    | Tstr_attribute _ -> defined_idents rem

Ambiguity 4: 
| item :: rem ->
    match item.str_desc with
    | Tstr_eval (expr, _attrs) -> more_idents rem
    | Tstr_value(rec_flag, pat_expr_list) -> more_idents rem
    | Tstr_primitive _ -> more_idents rem
    | Tstr_type decls -> more_idents rem
    | Tstr_typext tyext -> more_idents rem
    | Tstr_exception _ -> more_idents rem
    | Tstr_recmodule decls -> more_idents rem
    | Tstr_modtype _ -> more_idents rem
    | Tstr_open _ -> more_idents rem
    | Tstr_class cl_list -> more_idents rem
    | Tstr_class_type cl_list -> more_idents rem
    | Tstr_include _ -> more_idents rem
    | Tstr_module {mb_expr={mod_desc = Tmod_structure str}} ->
        all_idents str.str_items @ more_idents rem
    | Tstr_module _ -> more_idents rem
    | Tstr_attribute _ -> more_idents rem

Ambiguity 5: 
| item :: rem ->
    match item.str_desc with
    | Tstr_eval (expr, _attrs) -> all_idents rem
    | Tstr_value(rec_flag, pat_expr_list) ->
      let_bound_idents pat_expr_list @ all_idents rem
    | Tstr_primitive _ -> all_idents rem
    | Tstr_type decls -> all_idents rem
    | Tstr_typext tyext ->
      List.map (fun ext -> ext.ext_id) tyext.tyext_constructors
      @ all_idents rem
    | Tstr_exception ext -> ext.ext_id :: all_idents rem
    | Tstr_recmodule decls ->
      List.map (fun mb -> mb.mb_id) decls @ all_idents rem
    | Tstr_modtype _ -> all_idents rem
    | Tstr_open _ -> all_idents rem
    | Tstr_class cl_list ->
      List.map (fun (ci, _, _) -> ci.ci_id_class) cl_list @ all_idents rem
    | Tstr_class_type cl_list -> all_idents rem
    | Tstr_include incl ->
      bound_value_identifiers incl.incl_type @ all_idents rem
    | Tstr_module {mb_id;mb_expr={mod_desc = Tmod_structure str}} ->
        mb_id :: all_idents str.str_items @ all_idents rem
    | Tstr_module mb -> mb.mb_id :: all_idents rem
    | Tstr_attribute _ -> all_idents rem

Ambiguity 6: 
| item :: rem ->
        match item.str_desc with
  | Tstr_eval (expr, _attrs) ->
      Lsequence(subst_lambda subst (transl_exp expr),
                transl_store rootpath subst rem)
  | Tstr_value(rec_flag, pat_expr_list) ->
      let ids = let_bound_idents pat_expr_list in
      let lam = transl_let rec_flag pat_expr_list (store_idents Location.none ids) in
      Lsequence(subst_lambda subst lam,
                transl_store rootpath (add_idents false ids subst) rem)
  | Tstr_primitive descr ->
      record_primitive descr.val_val;
      transl_store rootpath subst rem
  | Tstr_type decls ->
      transl_store rootpath subst rem
  | Tstr_typext(tyext) ->
      let ids = List.map (fun ext -> ext.ext_id) tyext.tyext_constructors in
      let lam =
        transl_type_extension item.str_env rootpath tyext (store_idents Location.none ids)
      in
        Lsequence(subst_lambda subst lam,
                  transl_store rootpath (add_idents false ids subst) rem)
  | Tstr_exception ext ->
      let id = ext.ext_id in
      let path = field_path rootpath id in
      let lam = transl_extension_constructor item.str_env path ext in
      Lsequence(Llet(Strict, id, subst_lambda subst lam, store_ident ext.ext_loc id),
                transl_store rootpath (add_ident false id subst) rem)
  | Tstr_module{mb_id=id; mb_expr={mod_desc = Tmod_structure str}; mb_loc = loc} ->
    let lam = transl_store (field_path rootpath id) subst str.str_items in
      (* Careful: see next case *)
    let subst = !transl_store_subst in
    Lsequence(lam,
              Llet(Strict, id,
                   subst_lambda subst
                   (Lprim(Pmakeblock(0, Lambda.default_tag_info, Immutable),
                          List.map (fun id -> Lvar id)
                                   (defined_idents str.str_items),loc)),
                   Lsequence(store_ident loc id,
                             transl_store rootpath (add_ident true id subst)
                                          rem)))
  | Tstr_module{mb_id=id; mb_expr=modl; mb_loc = loc} ->
      let lam = transl_module Tcoerce_none (field_path rootpath id) modl in
      (* Careful: the module value stored in the global may be different
         from the local module value, in case a coercion is applied.
         If so, keep using the local module value (id) in the remainder of
         the compilation unit (add_ident true returns subst unchanged).
         If not, we can use the value from the global
         (add_ident true adds id -> Pgetglobal... to subst). *)
      Llet(Strict, id, subst_lambda subst lam,
        Lsequence(store_ident loc id,
                  transl_store rootpath (add_ident true id subst) rem))
  | Tstr_recmodule bindings ->
      let ids = List.map (fun mb -> mb.mb_id) bindings in
      compile_recmodule
        (fun id modl ->
          subst_lambda subst
            (transl_module Tcoerce_none
                           (field_path rootpath id) modl))
        bindings
        (Lsequence(store_idents Location.none ids,
                   transl_store rootpath (add_idents true ids subst) rem))
  | Tstr_class cl_list ->
      let ids = List.map (fun (ci, _, _) -> ci.ci_id_class) cl_list in
      let lam =
        Lletrec(List.map
              (fun (ci, meths, vf) ->
                let id = ci.ci_id_class in
                let cl = ci.ci_expr in
                     (id, transl_class ids id meths cl vf))
                  cl_list,
                store_idents Location.none ids) in
      Lsequence(subst_lambda subst lam,
                transl_store rootpath (add_idents false ids subst) rem)
  | Tstr_include incl ->
      let ids = bound_value_identifiers incl.incl_type in
      let modl = incl.incl_mod in
      let mid = Ident.create "include" in
      let loc = incl.incl_loc in
      let rec store_idents pos = function
        [] -> transl_store rootpath (add_idents true ids subst) rem
      | id :: idl ->
          Llet(Alias, id, Lprim(Pfield (pos, Fld_na), [Lvar mid],loc),
               Lsequence(store_ident loc id, store_idents (pos + 1) idl)) in
      Llet(Strict, mid,
           subst_lambda subst (transl_module Tcoerce_none None modl),
           store_idents 0 ids)
  | Tstr_modtype _
  | Tstr_open _
  | Tstr_class_type _
  | Tstr_attribute _ ->
      transl_store rootpath subst rem