Ambiguity 1: 
show { Node_config_file.data_dir } =
  Node_identity_file.read (identity_file data_dir) >>=? fun id ->
  Format.printf "Peer_id: %a.@." P2p_types.Peer_id.pp id.peer_id ;
  return ()

Ambiguity 2: 
let identity_file = identity_file data_dir in
  if Sys.file_exists identity_file then
    fail (Node_identity_file.Existent_identity_file identity_file)
  else
    let target = Crypto_box.make_target net.expected_pow in
    Format.eprintf "Generating a new identity... (level: %.2f) " net.expected_pow ;
    let id =
      P2p.Identity.generate_with_animation Format.err_formatter target in
    Node_identity_file.write identity_file id >>=? fun () ->
    Format.eprintf
      "Stored the new identity (%a) into '%s'.@."
      P2p.Peer_id.pp id.peer_id identity_file ;
    return ()

Ambiguity 3: 
check { Node_config_file.data_dir ; net = { expected_pow } } =
  Node_identity_file.read
    ~expected_pow (identity_file data_dir) >>=? fun id ->
  Format.printf
    "Peer_id: %a. Proof of work is higher than %.2f.@."
    P2p_types.Peer_id.pp id.peer_id expected_pow ;
  return ()