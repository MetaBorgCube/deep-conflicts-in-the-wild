Ambiguity 1: 
load cctxt >>=? fun list ->
    begin
      if cctxt.config.force then
        return ()
      else
        iter_s (fun (n, v) ->
            if n = name && v = value then begin
              keep := true ;
              cctxt.message
                "The %s alias %s already exists with the same value."
                Entity.name n >>= fun () ->
              return ()
            end else if n = name && v <> value then begin
              failwith
                "another %s is already aliased as %s, \
                 use -force true to update"
                Entity.name n
            end else if n <> name && v = value then begin
              failwith
                "this %s is already aliased as %s, \
                 use -force true to insert duplicate"
                Entity.name n
            end else begin
              return ()
            end)
          list
    end >>=? fun () ->
    let list = List.filter (fun (n, _) -> n <> name) list in
    let list = (name, value) :: list in
    if !keep then
      return ()
    else
      save cctxt list >>=? fun () ->
      cctxt.Client_commands.message
        "New %s alias '%s' saved." Entity.name name >>= fun () ->
      return ()

Ambiguity 2: 
save cctxt list >>=? fun () ->
    cctxt.Client_commands.message
      "Successful update of the %s alias file." Entity.name >>= fun () ->
    return ()

Ambiguity 3: 
find cctxt s >>= function
               | Ok v -> return v
               | Error a_errs ->
                   read s >>= function
                   | Ok v -> return v
                   | Error r_errs ->
                       of_source cctxt s >>= function
                       | Ok v -> return v
                       | Error s_errs ->
                           let all_errs =
                             List.flatten [ a_errs ; r_errs ; s_errs ] in
                           Lwt.return (Error all_errs)