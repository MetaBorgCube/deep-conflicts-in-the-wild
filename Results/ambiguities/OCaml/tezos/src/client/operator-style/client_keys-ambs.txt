Ambiguity 1: 
Secret_key.add cctxt name secret_key >>=? fun () ->
  Public_key.add cctxt name public_key >>=? fun () ->
  Public_key_hash.add
    cctxt name (Ed25519.Public_key.hash public_key) >>=? fun () ->
  cctxt.message
    "I generated a brand new pair of keys under the name '%s'." name >>= fun () ->
  return ()

Ambiguity 2: 
Public_key_hash.rev_find cctxt pkh >>=? function
  | None -> cctxt.error "no keys for the source contract manager"
  | Some n ->
      Public_key.find cctxt n >>=? fun pk ->
      Secret_key.find cctxt n >>=? fun sk ->
      return (n, pk, sk)

Ambiguity 3: 
Secret_key.load cctxt >>=? fun sks ->
  Lwt_list.filter_map_s
    (fun (name, sk) ->
       begin
         Public_key.find cctxt name >>=? fun pk ->
         Public_key_hash.find cctxt name >>=? fun pkh ->
         return (name, pkh, pk, sk)
       end >>= function
       | Ok r -> Lwt.return (Some r)
       | Error _ -> Lwt.return_none)
    sks >>= fun keys ->
  return keys

Ambiguity 4: 
Public_key.mem cctxt name >>=? fun pkm ->
       Secret_key.mem cctxt name >>=? fun pks ->
       return (name, pkh, pkm, pks)

Ambiguity 5: 
Public_key.find_opt cctxt name >>=? function
         | None ->
             failwith
               "no public key named '%s', add it before adding the secret key"
               name
         | Some pk ->
             fail_unless
               (check_keys_consistency pk sk || cctxt.config.force)
               (failure
                  "public and secret keys '%s' don't correspond, \
                   please don't use -force true" name) >>=? fun () ->
             Secret_key.add cctxt name sk

Ambiguity 6: 
Public_key_hash.to_source cctxt pkh >>=? fun v ->
              cctxt.message "%s: %s%s%s" name v
                (if pkm then " (public key known)" else "")
                (if pks then " (secret key known)" else "") >>= fun () ->
              return ()

Ambiguity 7: 
fail_unless cctxt.config.force
           (failure "this can only used with option -force true") >>=? fun () ->
         Public_key.save cctxt [] >>=? fun () ->
         Secret_key.save cctxt [] >>=? fun () ->
         Public_key_hash.save cctxt []