Ambiguity 1: 
element (string_of_int n :: path) elt >>= fun json ->
            (if n < min then Lwt.return true else input.continue title path) >>= function
            | true -> fill_loop (json :: acc) min (succ n) max
            | false -> Lwt.return (json :: acc)

Ambiguity 2: 
random_fill_in schema >>= function
    | Error msg -> Lwt.return (Error msg)
    | Ok json ->
        Lwt_io.(with_file Output tmp (fun fp ->
            write_line fp (Data_encoding_ezjsonm.to_string json))) >>= fun () ->
        edit ()

Ambiguity 3: 
(Lwt_process.open_process_none editor_cmd) # status >>= function
    | Unix.WEXITED 0 ->
        reread () >>= fun json ->
        delete () >>= fun () ->
        Lwt.return json
    | Unix.WSIGNALED x | Unix.WSTOPPED x | Unix.WEXITED x ->
        let msg = Printf.sprintf "FAILED %d \n%!" x in
        delete () >>= fun () ->
        Lwt.return (Error msg)

Ambiguity 4: 
Client_node_rpcs.describe cctxt.rpc_config
    ~recurse:true args >>=? fun tree ->
  let open RPC.Description in
  let collected_args = ref [] in
  let collect arg =
    if not (arg.RPC.Arg.descr <> None && List.mem arg !collected_args) then
      collected_args := arg :: !collected_args in
  let display_paragraph ppf description =
    Format.fprintf ppf "@,    @[%a@]"
      (fun ppf words -> List.iter (Format.fprintf ppf "%s@ ") words)
      (Utils.split ' ' description)
  in
  let display_arg ppf arg =
    match arg.RPC.Arg.descr with
    | None -> Format.fprintf ppf "%s" arg.RPC.Arg.name
    | Some descr ->
        Format.fprintf ppf "<%s>%a" arg.RPC.Arg.name display_paragraph descr
  in
  let display_service ppf (_path, tpath, service) =
    Format.fprintf ppf "- /%s" (String.concat "/" tpath) ;
    match service.description with
    | None | Some "" -> ()
    | Some description -> display_paragraph ppf description
  in
  let rec display ppf (path, tpath, tree) =
    match tree with
    | Dynamic description -> begin
        Format.fprintf ppf "- /%s <dynamic>" (String.concat "/" tpath) ;
        match description with
        | None | Some "" -> ()
        | Some description -> display_paragraph ppf description
      end
    | Static { service = None ; subdirs = None } -> ()
    | Static { service = Some service ; subdirs = None } ->
        display_service ppf (path, tpath, service)
    | Static { service ; subdirs = Some (Suffixes subdirs) } -> begin
        match service, StringMap.bindings subdirs with
        | None, [] -> ()
        | None, [ n, solo ] ->
            display ppf (path @ [ n ], tpath @ [ n ], solo)
        | None, items when count tree >= 3 && path <> [] ->
            Format.fprintf ppf "@[<v 2>+ %s/@,%a@]"
              (String.concat "/" path) (display_list tpath) items
        | Some service, items when count tree >= 3 && path <> [] ->
            Format.fprintf ppf "@[<v 2>+ %s@,%a@,%a@]"
              (String.concat "/" path)
              display_service (path, tpath, service)
              (display_list tpath) items
        | None, (n, t) :: items ->
            Format.fprintf ppf "%a"
              display (path @ [ n ], tpath @ [ n ], t) ;
            List.iter
              (fun (n, t) ->
                 Format.fprintf ppf "@,%a"
                   display (path @ [ n ], tpath @ [ n ], t))
              items
        | Some service, items ->
            display_service ppf (path, tpath, service) ;
            List.iter
              (fun (n, t) ->
                 Format.fprintf ppf "@,%a"
                   display (path @ [ n ], tpath @ [ n ], t))
              items
      end
    | Static { service = None ; subdirs = Some (Arg (arg, solo)) } ->
        collect arg ;
        let name = Printf.sprintf "<%s>" arg.RPC.Arg.name in
        display ppf (path @ [ name ], tpath @ [ name ], solo)
    | Static { service = Some service ;
               subdirs = Some (Arg (arg, solo)) } ->
        collect arg ;
        display_service ppf (path, tpath, service) ;
        Format.fprintf ppf "@," ;
        let name = Printf.sprintf "<%s>" arg.RPC.Arg.name in
        display ppf (path @ [ name ], tpath @ [ name ], solo)
  and display_list tpath =
    Format.pp_print_list
      (fun ppf (n,t) -> display ppf ([ n ], tpath @ [ n ], t))
  in
  cctxt.message "@ @[<v 2>Available services:@ @ %a@]@."
    display (args, args, tree) >>= fun () ->
  if !collected_args <> [] then begin
    cctxt.message "@,@[<v 2>Dynamic parameter description:@ @ %a@]@."
      (Format.pp_print_list display_arg) !collected_args >>= fun () ->
    return ()
  end else return ()

Ambiguity 5: 
Client_node_rpcs.describe cctxt.rpc_config ~recurse:false args >>=? function
  | Static { service = Some { input ; output } } ->
      let json = `O [ "input", Json_schema.to_json input ;
                      "output", Json_schema.to_json output ] in
      cctxt.message "%a" Json_repr.(pp (module Ezjsonm)) json >>= fun () ->
      return ()
  | _ ->
      cctxt.message
        "No service found at this URL (but this is a valid prefix)\n%!" >>= fun () ->
      return ()

Ambiguity 6: 
Client_node_rpcs.describe cctxt.rpc_config ~recurse:false args >>=? function
  | Static { service = Some { input ; output } } ->
      cctxt.message
        "@[<v 0>\
         @[<v 2>Input format:@,%a@]@,\
         @[<v 2>Output format:@,%a@]@,\
         @]"
        Json_schema.pp input
        Json_schema.pp output >>= fun () ->
      return ()
  | _ ->
      cctxt.message
        "No service found at this URL (but this is a valid prefix)\n%!" >>= fun () ->
      return ()

Ambiguity 7: 
Client_node_rpcs.describe cctxt.rpc_config ~recurse:false args >>=? function
  | Static { service = Some { input } } -> begin
      fill_in input >>= function
      | Error msg ->
          cctxt.error "%s" msg >>= fun () ->
          return ()
      | Ok json ->
          Client_rpcs.get_json cctxt.rpc_config `POST args json >>=? fun json ->
          cctxt.message "%a"
            Json_repr.(pp (module Ezjsonm)) json >>= fun () ->
          return ()
    end
  | _ ->
      cctxt.message
        "No service found at this URL (but this is a valid prefix)\n%!" >>= fun () ->
      return ()

Ambiguity 8: 
Client_rpcs.get_json cctxt.rpc_config `POST args json >>=? fun json ->
      cctxt.message "%a"
        Json_repr.(pp (module Ezjsonm)) json >>= fun () ->
      return ()