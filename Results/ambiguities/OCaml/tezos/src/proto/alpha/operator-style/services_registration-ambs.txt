Ambiguity 1: 
operation_hashes () >>= fun operation_hashes ->
       operations () >>= fun operations ->
       map2_s
         (map2_s (fun x y -> Lwt.return (Operation.parse x y)))
         operation_hashes operations

Ambiguity 2: 
level ctxt >>=? fun level ->
  Nonce.get ctxt level >>=? function
  | Unrevealed { nonce_hash } -> return nonce_hash
  | _ -> assert false

Ambiguity 3: 
rpc_init ctxt >>=? fun { context = ctxt } ->
             Contract.exists ctxt contract >>=? function
             | true -> f ctxt contract arg
             | false -> raise Not_found

Ambiguity 4: 
Contract.get_balance ctxt contract >>=? fun balance ->
      Contract.get_manager ctxt contract >>=? fun manager ->
      Contract.get_delegate_opt ctxt contract >>=? fun delegate ->
      Contract.get_counter ctxt contract >>=? fun counter ->
      Contract.is_delegatable ctxt contract >>=? fun delegatable ->
      Contract.is_spendable ctxt contract >>=? fun spendable ->
      Contract.get_script ctxt contract >>=? fun script ->
      return { Services.Context.Contract.manager ; balance ;
               spendable ; delegate = (delegatable, delegate) ;
               script ; counter }

Ambiguity 5: 
Mining.mining_priorities ctxt level >>=? fun (Misc.LCons (miner_pkh, _)) ->
           let miner_contract = Contract.default_contract miner_pkh in
           let block_prio = 0 in
           Apply.apply_operation
             ctxt (Some miner_contract) pred_block block_prio operation
           >>=? function
           | (_ctxt, _, Some script_err) -> Lwt.return (Error script_err)
           | (_ctxt, contracts, None) -> Lwt.return (Ok contracts)

Ambiguity 6: 
Mining.mining_priorities ctxt level >>=? fun contract_list ->
  let rec loop l n =
    match n with
    | 0 -> return []
    | n ->
        let Misc.LCons (h, t) = l in
        t () >>=? fun t ->
        loop t (pred n) >>=? fun t ->
        return (h :: t)
  in
  loop contract_list max >>=? fun prio ->
  return (level.level, prio)

Ambiguity 7: 
mining_rights ctxt level max >>=? fun (raw_level, slots) ->
       begin
         Lwt_list.filter_map_p (fun x -> x) @@
         List.mapi
           (fun prio c ->
             let timestamp = Timestamp.current ctxt in
              Mining.minimal_time ctxt prio timestamp >>= function
              | Error _ -> Lwt.return None
              | Ok minimal_timestamp -> Lwt.return (Some (c, minimal_timestamp)))
           slots
       end >>= fun timed_slots ->
       return (raw_level, timed_slots)

Ambiguity 8: 
loop (Level.succ ctxt level) >>=? fun t ->
      Mining.first_mining_priorities
        ctxt ~max_priority contract level >>=? fun priorities ->
      let raw_level = level.level in
      Error_monad.map_s
        (fun priority ->
           let timestamp = Timestamp.current ctxt in
           Mining.minimal_time ctxt priority timestamp >>=? fun time ->
           return (raw_level, priority, time))
        priorities >>=? fun priorities ->
      return (priorities @ t)

Ambiguity 9: 
Mining.endorsement_priorities ctxt level >>=? fun contract_list ->
  let rec loop l n =
    match n with
    | 0 -> return []
    | n ->
        let Misc.LCons (h, t) = l in
        t () >>=? fun t ->
        loop t (pred n) >>=? fun t ->
        return (h :: t)
  in
  loop contract_list max >>=? fun prio ->
  return (level.level, prio)

Ambiguity 10: 
loop (Level.succ ctxt level) >>=? fun t ->
      Mining.first_endorsement_slots
        ctxt ~max_priority contract level >>=? fun slots ->
      let raw_level = level.level in
      let slots = List.rev_map (fun slot -> (raw_level, slot)) slots in
      return (List.rev_append slots t)

Ambiguity 11: 
Operation.parse_proto proto >>=? fun (proto, signature) ->
      begin match check with
      | Some true -> check_signature ctxt signature shell proto
      | Some false | None -> return ()
      end >>|? fun () -> proto