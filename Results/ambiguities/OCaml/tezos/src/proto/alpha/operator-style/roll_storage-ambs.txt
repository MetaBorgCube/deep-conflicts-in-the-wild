Ambiguity 1: 
Storage.Roll.Last_for_cycle.get c cycle >>=? fun last ->
  Storage.Roll.Last_for_cycle.delete c cycle >>=? fun c ->
  let rec loop c roll =
    if Roll_repr.(roll = last) then
      return c
    else
      Storage.Roll.Owner_for_cycle.delete c (cycle, roll) >>=? fun c ->
      loop c (Roll_repr.succ roll) in
  loop c Roll_repr.first

Ambiguity 2: 
acc >>=? fun acc ->
    if Roll_repr.(roll = last) then
      return acc
    else
      Storage.Roll.Owner.get_option ctxt roll >>=? function
      | None ->
          loop ctxt (Roll_repr.succ roll) (return acc)
      | Some contract ->
          loop ctxt (Roll_repr.succ roll) (f roll contract acc)

Ambiguity 3: 
get_contract_delegate ctxt contract >>=? function
        | None -> return acc
        | Some delegate ->
            Storage.Roll.Owner_for_cycle.init
              ctxt (cycle, promoted_roll) delegate >>=? fun ctxt ->
            return (ctxt, Roll_repr.succ promoted_roll)

Ambiguity 4: 
Seed_storage.for_cycle c cycle >>=? fun random_seed ->
    let rd = level_random random_seed kind level in
    let sequence = Seed_repr.sequence rd (Int32.of_int offset) in
    Storage.Roll.Last_for_cycle.get c cycle >>=? fun bound ->
    let roll, _ = Roll_repr.random sequence bound in
    Storage.Roll.Owner_for_cycle.get c (cycle, roll)

Ambiguity 5: 
Storage.Roll.Next.get c >>=? fun roll ->
    Storage.Roll.Next.set c (Roll_repr.succ roll) >>=? fun c ->
    return (roll, c)

Ambiguity 6: 
fresh_roll c >>=? fun (roll, c) ->
        Storage.Roll.Limbo.set c (Some roll) >>=? fun c ->
        return (roll, c)

Ambiguity 7: 
Storage.Roll.Contract_change.get c contract >>=? fun change ->
    trace Consume_roll_change
      (Lwt.return Tez_repr.(change -? Constants_repr.roll_value)) >>=? fun new_change ->
    Storage.Roll.Contract_change.set c contract new_change

Ambiguity 8: 
Storage.Roll.Contract_change.get c contract >>=? fun change ->
    Lwt.return Tez_repr.(change +? Constants_repr.roll_value) >>=? fun new_change ->
    Storage.Roll.Contract_change.set c contract new_change

Ambiguity 9: 
recover_roll_change c contract >>=? fun c ->
    (* beginning:
       contract : roll -> successor_roll -> ...
       limbo : limbo_head -> ...
    *)
    Storage.Roll.Limbo.get c >>=? fun limbo_head ->
    Storage.Roll.Contract_roll_list.get c contract >>=? function
    | None -> fail No_roll_in_contract
    | Some roll ->
        Storage.Roll.Owner.delete c roll >>=? fun c ->
        Storage.Roll.Successor.get c roll >>=? fun successor_roll ->
        Storage.Roll.Contract_roll_list.set c contract successor_roll >>=? fun c ->
        (* contract : successor_roll -> ...
           roll ------^
           limbo : limbo_head -> ... *)
        Storage.Roll.Successor.set c roll limbo_head >>=? fun c ->
        (* contract : successor_roll -> ...
           roll ------v
           limbo : limbo_head -> ... *)
        Storage.Roll.Limbo.set c (Some roll) >>=? fun c ->
        (* contract : successor_roll -> ...
           limbo : roll -> limbo_head -> ... *)
        Lwt.return (Ok (roll, c))

Ambiguity 10: 
consume_roll_change c contract >>=? fun c ->

    (* beginning:
       contract : contract_head -> ...
       limbo : roll -> limbo_successor -> ...
    *)
    Storage.Roll.Contract_roll_list.get c contract >>=? fun contract_head ->
    get_limbo_roll c >>=? fun (roll, c) ->
    Storage.Roll.Owner.init c roll contract >>=? fun c ->
    Storage.Roll.Successor.get c roll >>=? fun limbo_successor ->
    Storage.Roll.Limbo.set c limbo_successor >>=? fun c ->
    (* contract : contract_head -> ...
       roll ------v
       limbo : limbo_successor -> ... *)
    Storage.Roll.Successor.set c roll contract_head >>=? fun c ->
    (* contract : contract_head -> ...
       roll ------^
       limbo : limbo_successor -> ... *)
    Storage.Roll.Contract_roll_list.set c contract (Some roll)

Ambiguity 11: 
Storage.Roll.Contract_change.get c contract >>=? fun change ->
    Lwt.return Tez_repr.(amount +? change) >>=? fun change ->
    Storage.Roll.Contract_change.set c contract change >>=? fun c ->
    let rec loop c change =
      if Tez_repr.(change < Constants_repr.roll_value) then
        return c
      else
        Lwt.return Tez_repr.(change -? Constants_repr.roll_value) >>=? fun  change ->
        create_roll_in_contract c contract >>=? fun c ->
        loop c change in
    loop c change

Ambiguity 12: 
pop_roll_from_contract c contract >>=? fun (_, c) ->
        Lwt.return Tez_repr.(change +? Constants_repr.roll_value) >>=? fun change ->
        loop c change

Ambiguity 13: 
Storage.Roll.Contract_change.get c contract >>=? fun change ->
    loop c change >>=? fun (c, change) ->
    Lwt.return Tez_repr.(change -? amount) >>=? fun change ->
    Storage.Roll.Contract_change.set c contract change

Ambiguity 14: 
Storage.Roll.Contract_change.get c contract >>=? fun change ->
    Storage.Roll.Contract_roll_list.get c contract >>=? fun roll_list ->
    fail_unless (Tez_repr.(change = zero) &&
                 match roll_list with None -> true | Some _ -> false)
      Deleted_contract_owning_rolls