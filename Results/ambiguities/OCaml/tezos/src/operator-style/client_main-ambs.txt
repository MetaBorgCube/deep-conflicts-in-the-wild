Ambiguity 1: 
let rpc_config : Client_rpcs.config = {
      Client_rpcs.default_config with
      host = parsed_config_file.node_addr ;
      port = parsed_config_file.node_port ;
      tls = parsed_config_file.tls ;
    } in
    begin
      Client_node_rpcs.Blocks.protocol rpc_config block >>= function
      | Ok version ->
          Lwt.return (Some version, Client_commands.commands_for_version version)
      | Error errs ->
          Format.eprintf
            "@[<v 2>Ignored error:@,Failed to acquire the protocol version from the node@,%a@."
            (Format.pp_print_list pp) errs ;
          Lwt.return (None, [])
    end >>= fun (_version, commands_for_version)  ->
    let commands =
      Client_generic_rpcs.commands @
      Client_network.commands () @
      Client_keys.commands () @
      Client_protocols.commands () @
      Client_helpers.commands () @
      commands_for_version in
    (Client_config.parse_args
       (Cli_entries.usage ~commands)
       (Cli_entries.inline_dispatch commands)
       Sys.argv >>=? fun (command, parsed_args) ->
     let config : Client_commands.cfg = {
       base_dir = parsed_config_file.base_dir ;
       force = parsed_args.force ;
       block ;
       web_port = Client_commands.default_cfg.web_port ;
     } in
     let rpc_config =
       if parsed_args.print_timings then
         { rpc_config with
           logger = Client_rpcs.timings_logger Format.err_formatter }
       else
         rpc_config
     in
     command (cctxt config rpc_config)) >>= function
    | Ok () ->
        Lwt.return 0
    | Error errs ->
        Format.eprintf "@[<v 2>Fatal error:@,%a@.\
                        Try `-help` for a list of options and commands.@."
          (Format.pp_print_list Error_monad.pp) errs ;
        Lwt.return 1