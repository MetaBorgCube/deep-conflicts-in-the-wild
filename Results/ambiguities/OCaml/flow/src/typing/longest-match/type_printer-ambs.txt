Ambiguity 1: 
| None ->
    match t with
    | OpenT (_, id) ->
        spf "TYPE_%d" id

    | DefT (r, NumT _)
    | DefT (r, StrT _)
    | DefT (r, BoolT _)
    | DefT (r, EmptyT)
    | DefT (r, MixedT _)
    | DefT (r, AnyT)
    | DefT (r, NullT)
      -> string_of_desc (desc_of_reason r)

    | BoundT typeparam -> typeparam.name

    | DefT (_, SingletonStrT s) -> spf "'%s'" s
    | DefT (_, SingletonNumT (_, raw)) -> raw
    | DefT (_, SingletonBoolT b) -> string_of_bool b

    (* reasons for VoidT use "undefined" for more understandable error output.
       For parsable types we need to use "void" though, thus overwrite it. *)
    | DefT (_, VoidT) -> "void"

    | DefT (_, FunT (_, _, ft)) ->
        let {
          params_tlist = ts;
          params_names = pns;
          rest_param;
          return_t = t;
          _;
        } = ft in
        let pns =
          match pns with
          | Some pns -> pns
          | None -> List.map (fun _ -> "_") ts in
        let params = List.map2 (fun n t ->
          (parameter_name cx n t) ^ ": " ^ (pp EnclosureParam cx t))
          pns ts in
        let params = match rest_param with
        | None -> params
        | Some (name, _, t) ->
          let name = Option.value ~default:"_" name in
          let param_name = rest_parameter_name cx name t in
          params @ [param_name ^ ": " ^ (pp EnclosureParam cx t)]
        in
        let type_s = match enclosure with
          | EnclosureMethod -> spf "(%s): %s"
            (params |> String.concat ", ")
            (pp EnclosureNone cx t)
          | _ -> spf "(%s) => %s"
            (params |> String.concat ", ")
            (pp EnclosureNone cx t)
        in
        parenthesize type_s enclosure [EnclosureUnion; EnclosureIntersect]

    | DefT (_, ObjT {props_tmap = flds; dict_t; _}) ->
        string_of_obj flds dict_t ~exact:false

    | ExactT (_, DefT (_, ObjT {props_tmap = flds; dict_t; _})) ->
        string_of_obj flds dict_t ~exact:true

    | ExactT (_, t) ->
        spf "$Exact<%s>" (pp EnclosureNone cx t)

    | DefT (_, ArrT (ArrayAT (t, None))) ->
        spf "Array<%s>" (pp EnclosureNone cx t)
    | DefT (_, ArrT (ROArrayAT t)) ->
        spf "$ReadOnlyArray<%s>" (pp EnclosureNone cx t)
    | DefT (_, ArrT (ArrayAT (_, Some ts)))
    | DefT (_, ArrT (TupleAT (_, ts))) ->
        ts
        |> List.map (pp EnclosureNone cx)
        |> String.concat ", "
        |> spf "[%s]"
    | DefT (_, ArrT EmptyAT) -> "$EmptyArray"

    | DefT (reason, InstanceT _) ->
        DescFormat.name_of_instance_reason reason

    | DefT (_, TypeAppT (c,ts)) ->
        let type_s =
          spf "%s<%s>"
            (instance_of_poly_type_printer ~size override EnclosureAppT cx c)
            (ts
              |> List.map (pp EnclosureNone cx)
              |> String.concat ", "
            )
        in
        parenthesize type_s enclosure [EnclosureMaybe]

    | DefT (_, MaybeT t) ->
        spf "?%s" (pp EnclosureMaybe cx t)

    | DefT (_, PolyT (xs, t)) ->
        let xs_str =
          xs
          |> List.map (fun param -> param.name)
          |> String.concat ", "
        in
        let type_s = match t with
        | DefT (_, ClassT u)
        | ThisClassT (_, u) ->
          spf "%s<%s>" (pp EnclosureNone cx u) xs_str
        | _ ->
          spf "<%s>%s" xs_str (pp
            begin match enclosure with
            | EnclosureMethod -> EnclosureMethod
            | _ -> EnclosureNone
            end
            cx t)
        in
        parenthesize type_s enclosure [EnclosureAppT; EnclosureMaybe]

    | DefT (_, IntersectionT rep) ->
        let mems = List.map (pp EnclosureIntersect cx) (InterRep.members rep) in
        let mems = dedup_strlist mems in
        let type_s = String.concat " & " mems in
        parenthesize type_s enclosure [EnclosureUnion; EnclosureMaybe]

    | DefT (_, UnionT rep) ->
        let mems = List.map (pp EnclosureUnion cx) (UnionRep.members rep) in
        let mems = dedup_strlist mems in
        let type_s = String.concat " | " mems in
        parenthesize type_s enclosure [EnclosureIntersect; EnclosureMaybe]

    | DefT (_, OptionalT t) ->
        let type_s = pp EnclosureNone cx t in
        begin match enclosure with
        | EnclosureParam | EnclosureProp -> type_s
        | _ -> type_s ^ " | void"
        end

    (* The following types are not syntax-supported in all cases *)
    | AnnotT t -> pp EnclosureNone cx t
    | KeysT (_, t) -> spf "$Keys<%s>" (pp EnclosureNone cx t)
    | ShapeT t -> spf "$Shape<%s>" (pp EnclosureNone cx t)
    | TaintT (_) -> spf "$Tainted<any>"

    (* The following types are not syntax-supported *)
    | DefT (_, ClassT t) ->
        spf "[class: %s]" (pp EnclosureNone cx t)

    | DefT (_, TypeT t) ->
        spf "[type: %s]" (pp EnclosureNone cx t)

    | AnyWithUpperBoundT t ->
        spf "$Subtype<%s>" (pp EnclosureNone cx t)

    | AnyWithLowerBoundT t ->
        spf "$Supertype<%s>" (pp EnclosureNone cx t)

    | DefT (_, AnyObjT) ->
        "Object"

    | DefT (_, AnyFunT) ->
        "Function"

    | IdxWrapper (_, t) ->
      spf "$IdxWrapper<%s>" (pp enclosure cx t)

    | ThisClassT _ ->
        "This"

    | ReposT (_, t)
    | ReposUpperT (_, t) ->
        pp enclosure cx t

    | OpenPredT (_, t, m_pos, m_neg) ->
        let l_pos = Key_map.elements m_pos in
        let l_neg = Key_map.elements m_neg in
        let str_of_pair (k,p) = spf "%s -> %s"
          (Key.string_of_key k) (string_of_predicate p) in
        spf "$OpenPred (%s) [+: %s] [-: %s]" (pp EnclosureNone cx t)
          (l_pos |> List.map str_of_pair |> String.concat ", ")
          (l_neg |> List.map str_of_pair |> String.concat ", ")

    | ExistsT _ ->
        "*"

    (* TODO: Fix these *)

    | FunProtoT _ ->
        "function proto"

    | FunProtoBindT _ ->
        "FunctionProtoBind"

    | CustomFunT _ ->
        "CustomFunction"

    | FunProtoApplyT _ ->
        "FunctionProtoApply"

    | EvalT _ ->
        "Eval"

    | ThisTypeAppT _ ->
        "This Type App"

    | ModuleT _ ->
        "Module"

    | ChoiceKitT _ ->
        "ChoiceKit"

    | FunProtoCallT _
    | ObjProtoT _
    | AbstractT _
    | DiffT (_, _)
    | ExtendsT (_, _, _, _)
    | TypeMapT (_, _, _, _) ->
        assert_false (spf "Missing printer for %s" (string_of_ctor t))