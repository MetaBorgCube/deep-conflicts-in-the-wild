Ambiguity 1: 
| _ ->
          let loc, acc = rev_nonempty_acc acc in
          match acc with
          | t0::t1::ts -> loc, Type.Union (t0, t1, ts)
          | _ -> assert false

Ambiguity 2: 
| _ ->
          let loc, acc = rev_nonempty_acc acc in
          match acc with
          | t0::t1::ts -> loc, Type.Intersection (t0, t1, ts)
          | _ -> assert false

Ambiguity 3: 
| T_LESS_THAN -> _function env
    | T_LPAREN -> function_or_group env
    | T_LCURLY
    | T_LCURLYBAR ->
      let loc, o = _object env
        ~allow_static:false ~allow_exact:true ~allow_spread:true in
      loc, Type.Object o
    | T_TYPEOF ->
        let start_loc = Peek.loc env in
        Expect.token env T_TYPEOF;
        let t = primary env in
        Loc.btwn start_loc (fst t), Type.Typeof t
    | T_LBRACKET -> tuple env
    | T_IDENTIFIER ->
        let loc, g = generic env in
        loc, Type.Generic g
    | T_STRING (loc, value, raw, octal)  ->
        if octal then strict_error env Error.StrictOctalLiteral;
        Expect.token env (T_STRING (loc, value, raw, octal));
        loc, Type.StringLiteral {
          Type.StringLiteral.value;
          raw;
        }
    | T_NUMBER_SINGLETON_TYPE (number_type, value) ->
        let raw = Peek.value env in
        Expect.token env (T_NUMBER_SINGLETON_TYPE (number_type, value));
        if number_type = LEGACY_OCTAL
        then strict_error env Error.StrictOctalLiteral;
        loc, Type.NumberLiteral {
          Type.NumberLiteral.value;
          raw;
        }
    | (T_TRUE | T_FALSE) as token ->
        let raw = Peek.value env in
        Expect.token env token;
        let value = token = T_TRUE in
        loc, Type.BooleanLiteral {
          Type.BooleanLiteral.value;
          raw;
        }
    | token ->
        match primitive token with
        | Some t ->
            Expect.token env token;
            loc, t
        | None ->
            error_unexpected env;
            loc, Type.Any

Ambiguity 4: 
| Some _ ->
              (* Don't know if this is (number) or (number: number). The first
               * is a type, the second is a param. *)
              match Peek.token ~i:1 env with
              | T_PLING | T_COLON ->
                (* Ok this is definitely a parameter *)
                ParamList (function_param_list_without_parens env [])
              | _ ->
                Type (_type env)