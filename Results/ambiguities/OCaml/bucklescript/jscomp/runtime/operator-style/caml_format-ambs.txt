Ambiguity 1: 
let n = f.prec -Bs_string.length !s in 
      if n > 0 then
        s :=  repeat n "0" [@bs]  ^ !s

Ambiguity 2: 
if  x < 0L then
        begin         
          let y = Js_int64.discard_sign x  in
          (* 2 ^  63 + y `div_mod` 8 *)        
          let quotient_l  = 1152921504606846976L (**)
            (* {lo =   0n; hi =  268435456n } *) (* 2 ^ 31 / 8 *)
          in 

          (* let c, d = Caml_int64.div_mod (Caml_int64.add y modulus_l) wbase in
             we can not do the code above, it can overflow when y is really large           
          *)
          let c, d = Js_int64.div_mod  y  wbase in

          let quotient =
            ref (Int64.add quotient_l c )  in
          let modulus = ref d in
          s :=
            Bs_string.of_char 
              cvtbl.[ Int64.to_int !modulus] ^ !s ;

          while  !quotient <> 0L do
            let a, b = Js_int64.div_mod (!quotient) wbase in
            quotient := a;
            modulus := b;
            s := Bs_string.of_char cvtbl.[Int64.to_int !modulus] ^ !s ;
          done;
        end
      else
        let a, b =  Js_int64.div_mod x wbase  in
        let quotient = ref a  in
        let modulus = ref b in
        s :=
          Bs_string.of_char 
            cvtbl.[ Int64.to_int !modulus] ^ !s ;

        while  !quotient <> 0L do
          let a, b = Js_int64.div_mod (!quotient) wbase in
          quotient := a;
          modulus := b;
          s := Bs_string.of_char cvtbl.[Int64.to_int !modulus] ^ !s ;
        done

Ambiguity 3: 
let  cvtbl = "0123456789" in

      if  x < 0L then
        let y  = Js_int64.discard_sign x  in
        (* 2 ^  63 + y `div_mod` 10 *)        

        let quotient_l  = 922337203685477580L (* 2 ^ 63 / 10 *)
          (* {lo =   -858993460n; hi =  214748364n} *)
          (* TODO:  int64 constant folding so that we can do idiomatic code
             2 ^ 63 / 10 *)in 
        let modulus_l  =  8L  in
        (* let c, d = Caml_int64.div_mod (Caml_int64.add y modulus_l) wbase in
           we can not do the code above, it can overflow when y is really large           
        *)
        let c, d = Js_int64.div_mod  y  wbase in
        let e ,f = Js_int64.div_mod (Int64.add modulus_l d) wbase in        
        let quotient =
          ref (Int64.add (Int64.add quotient_l c )
                 e)  in
        let modulus = ref f in
        s :=
          Bs_string.of_char 
            cvtbl.[Int64.to_int !modulus] ^ !s ;

        while !quotient <> 0L do
          let a, b = Js_int64.div_mod (!quotient) wbase in
          quotient := a;
          modulus := b;
          s := Bs_string.of_char cvtbl.[Int64.to_int !modulus] ^ !s ;
        done;

      else
        let a, b =  Js_int64.div_mod x wbase  in
        let quotient = ref a  in
        let modulus = ref b in
        s :=
          Bs_string.of_char 
            cvtbl.[ Int64.to_int !modulus] ^ !s ;

        while  !quotient <> 0L do
          let a, b = Js_int64.div_mod (!quotient) wbase in
          quotient := a;
          modulus := b;
          s := Bs_string.of_char cvtbl.[Int64.to_int !modulus] ^ !s ;
        done

Ambiguity 4: 
let n = f.prec -Bs_string.length !s in
      if n > 0 then
        s := repeat n "0" [@bs] ^ !s

Ambiguity 5: 
if exp < -4 || x >= 1e21 ||Bs_string.length (Js_float.toFixed x) > prec then 
          let i = ref (j - 1)  in
          while !s.[!i] = '0' do 
            decr i 
          done;
          if !s.[!i] = '.' then 
            decr i ;
          s := Bs_string.slice !s 0 (!i+1) ^ Bs_string.slice_rest !s j ;
          let i =Bs_string.length !s in 
          if !s.[i - 3] = 'e' then 
            s := Bs_string.slice !s 0 (i - 1) ^ "0" ^ Bs_string.slice_rest !s (i - 1) 
          else ()
        else 
          let p = ref prec in 
          if exp < 0 then 
            begin 
              p := !p - (exp + 1);
              s := Js_float.toFixedWithPrecision x ~digits:!p 
            end
          else 
            while (s := Js_float.toFixedWithPrecision x ~digits:!p;Bs_string.length !s > prec + 1) do 
              decr p
            done ;
          if !p <> 0 then 
            let k = ref @@Bs_string.length !s - 1 in 
            while !s.[!k] = '0' do 
              decr k
            done ;
            if !s.[!k] = '.' then 
              decr k ;
            s := Bs_string.slice !s 0 (!k + 1)